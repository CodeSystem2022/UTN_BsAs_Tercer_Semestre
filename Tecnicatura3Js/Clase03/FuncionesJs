// se conoce como hoisting, que JS llama a la funcion al inicio para poder llamarla incluso antes de declararla
miFuncion(3, 4);

function miFuncion(a, b) {
    //console.log("Sumamos: " + (a + b));
    return a + b;
}

// Llamamos la función
miFuncion(1, 2);

let resultado = miFuncion(4, 7);
console.log(resultado);

// Funciones de tipo expresion o anónimas
let x = function (a, b) { return a + b };

resultado = x(2, 5);
console.log(resultado);

// Funciones de tipo self invoking (tambien de tipo anónima, ya que no tiene nombre)
// No se puede reutilizar
(function (a, b) {
    console.log("Ejecutando la función: " + (a + b));
})(3, 4);


// Tipos de datos en una función 
console.log(typeof miFuncion2);
function miFuncion2(a, b) {
    //Solo se puede realizar dentro de la función
    console.log(arguments);
    console.log(arguments.length);

}
miFuncion2(1, 3, 4, 7);

// toString
var miFuncionTexto = miFuncion2.toString(); // Convierte la función a texto
console.log(miFuncionTexto);

// Funciones flecha ( => )
const sumarFuncionFlecha = (a, b) => a + b;
resultado = sumarFuncionFlecha(1, 3);
console.log(resultado);

// Funcion de tipo expresion
let sumar = function(a = 4, b = 8) {
    console.log(arguments[0]);
    console.log(arguments[1]);
    return a + b + arguments[2];

}

resultado = sumar(3,2,9);
console.log(resultado);


// Sumar todos los argumentos
let respuesta = sumarTodo(4, 5, 13, 10, 9);
console.log(respuesta );
function sumarTodo() {
    let suma = 0;
    for (let index = 0; index < arguments.length; index++) {
        suma += arguments[index];
    }
    return suma;
}

// Paso por valor
// Tipos primitivos
let k = 10;
function cambiarValor(a) { 
    a = 20; // Paso por valor
}
cambiarValor(k);
console.log(k); // La variable no sufre ningún cambio


// Paso por referencia
// Definimos un objeto
const persona = {
    nombre: 'Max',
    apellido: 'Chalin'
}
console.log(persona);
function cambiarValorObjeto(p1) { 
    p1.nombre = 'Juan';
    p1.apellido = 'Chalino';
}

cambiarValorObjeto(persona); // Al pasarle un objeto, toma el lugar de la memoria donde esta guardado y lo modifica
console.log(persona);
